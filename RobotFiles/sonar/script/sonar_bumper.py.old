#!/usr/bin/env python

import rospy
from std_msgs.msg import Int32 , Empty
from std_srvs import srv
import os
import serial
import time
import struct
import commands
from datetime import datetime 
import threading,thread
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseStamped, Twist
from move_base_msgs.msg import MoveBaseGoal
from math import sqrt, atan2, pow
from wheel.srv import *
from sonar.msg import DistanceMsg 
from sonar.msg import BumperMsg
from sonar.srv import *
from battery.srv import *

setSpeedsProxy = rospy.ServiceProxy( "setSpeeds", SetSpeeds )
getSpeedProxy = rospy.ServiceProxy( "getSpeed", GetSpeed )
setSpeedFProxy = rospy.ServiceProxy( "setSpeedF", SetSpeedDirection )
setSpeedBProxy = rospy.ServiceProxy( "setSpeedB", SetSpeedDirection )
getBatteryProxy = rospy.ServiceProxy( "getBatteryInfo", GetBatteryInfo )

goal_info = MoveBaseGoal()
twist_sign = True

bump1 = 1
bump2 = 1
bump3 = 1
bump4 = 1
bump5 = 1
bump6 = 1
bump7 = 1
bump8 = 1
value0 = 20
value1 = 20
value2 = 20
value3 = 20
value4 = 20
value5 = 20
value6 = 20

leftSignal = 0
rightSignal = 0
rearSignal = 0
rearFlag = True
distance = 10
leftFlag = False
rightFlag = False
chargingFlag = False
bumperCrashCount = 0
beginTime = time.time()
distanceIr1 = 1
distanceIr2 = 1
setChargingFlag = False

def get_sonar_value():
	global bump1,bump2,bump3,bump4,bump5,bump6,bump7,bump8,distanceIr1,distance2,setChargingFlag 
	global value0,value1,value2,value3,value4,value5,value6
	global leftSignal, rightSignal, rearSignal,distance,twist_sign,chargingFlag,rearFlag
	pub = rospy.Publisher("sonar_topic", DistanceMsg, queue_size = 10 )
	pub1= rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size = 10)
	rate = rospy.Rate(30)
	while True:
		sonar.write("\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\xB1")
		res = sonar.read(46)
		#print "read value lenght:", len(res)
		if len(res) == 46:
			if ord(res[0])==16:
				value0 = ord(res[3])*256 + ord(res[4])
				value1 = ord(res[5])*256 + ord(res[6])
				value2 = ord(res[7])*256 + ord(res[8])
				value3 = ord(res[9])*256 + ord(res[10])
				value4 = ord(res[11])*256 + ord(res[12])
				value5 = ord(res[13])*256 + ord(res[14])
				value6 = ord(res[15])*256 + ord(res[16])
				pubDist = DistanceMsg("sonar", value0, value1, value2, value3, value4, value5, value6)
				pub.publish(pubDist)
				bump = bin(ord(res[17])).replace('0b','')
				bump1 = bump[7]
				bump2 = bump[6]
				bump3 = bump[5]
				bump4 = bump[4]
				bump5 = bump[3]
				bump6 = bump[2]
				bump7 = bump[1]
				bump8 = bump[0]
				pubBump = BumperMsg(bump1,bump2,bump3,bump4,bump5,bump6,bump7,bump8)
				distanceir = bin(ord(res[21])).replace('0b','')
				if len(distanceir)==1 and distanceir=='0':
					distanceIr1 = 0
					distanceIr2 = 0
				elif len(distanceir)==1 and distanceir=='1':
					distanceIr1 = 1
					distanceIr2 = 0
				else:
					distanceIr1 = distanceir[0]
					distanceIr2 = distanceir[1]
				#print distanceIr1,distanceIr2
				if distanceIr1 == 0 or distanceIr2 == 0:
					rearFlag = False
				else:
					rearFlag = True

				rearSignal = ord(res[18])
				leftSignal = ord(res[19])
				rightSignal = ord(res[20])

				cliffDis1 = ord(res[22])*256 + ord(res[23])
				cliffDis2 = ord(res[24])*256 + ord(res[25])
				cliffDis3 = ord(res[26])*256 + ord(res[27])
				cliffDis4 = ord(res[28])*256 + ord(res[29])
				print "cliff distance:", cliffDis1
				
				batteryInfo = getBatteryProxy().BatteryInfo
				print batteryInfo[4],setChargingFlag
				if (batteryInfo[4]<50) and (not setChargingFlag):
					setChargingFlag = True
					nav_goal = PoseStamped()
					nav_goal.header.frame_id = "map"
					nav_goal.pose.position.x = 0.951
					nav_goal.pose.position.y = 7.51
					nav_goal.pose.position.z = 0.0
					nav_goal.pose.orientation.x = 0.0
					nav_goal.pose.orientation.y = 0.0
					nav_goal.pose.orientation.z = 0.9
					nav_goal.pose.orientation.w = 0.8
					pub1.publish(nav_goal)

				if (chargingFlag):
					auto_charging()
				else:
					#print distance, twist_sign
					if (distance<0.4) and (not twist_sign):
						os.system("rosnode kill /cmd_vel_listener")
						os.system("rosnode kill /move_base")
						chargingFlag = True
                				auto_charging()	

def getBumpers(req):
	global bump1,bump2,bump3,bump4,bump5,bump6,bump7,bump8
	list=[]
	list.append(bump1)
	list.append(bump2)
	list.append(bump3)
	list.append(bump4)
	list.append(bump5)
	list.append(bump6)
	list.append(bump7)
	list.append(bump8)
	return GetBumpersResponse(list)	

def getSonars(req):
	global value0,value1,value2,value3,value4,value5,value6
	list=[]
	if (value0==0.0):
		list.append(21.0)
	else:
		list.append(value0)
	if (value1==0.0):
		list.append(21.0)
	else:
		list.append(value1)
	if (value2==0.0):
		list.append(21.0)
	else:
		list.append(value2)
	if (value3==0.0):
		list.append(21.0)
	else:
		list.append(value3)
	if (value4==0.0):
		list.append(21.0)
	else:
		list.append(value4)
	if (value5==0.0):
		list.append(21.0)
	else:
		list.append(value5)
	if (value6==0.0):
		list.append(21.0)
	else:
		list.append(value6)
	return GetSonarsResponse(list)

def callback(msg):
        global twist_sign,distance
        goal_info.target_pose.header.frame_id = "map"
        goal_info.target_pose.pose.position.x = 0.915
        goal_info.target_pose.pose.position.y = 7.252

        robot_rotation_z = msg.pose.pose.orientation.z
        robot_rotation_w = msg.pose.pose.orientation.w
        robot_x  = msg.pose.pose.position.x
        robot_y =  msg.pose.pose.position.y
        '''
        robot_x = 1.89
        robot_y = 7.3
	'''
        x = pow(robot_x-goal_info.target_pose.pose.position.x,2)
        y = pow(robot_y-goal_info.target_pose.pose.position.y,2)
        distance = sqrt(x+y)
	#print "distance is:",distance,"twist_sign: ",twist_sign
        #if (distance<0.3) and (twist_sign):
                #auto_charging()

def auto_charging():
        global rearSignal, rightSignal, leftSignal
        auto_move(rearSignal, leftSignal, rightSignal)

def auto_move(rearSignal,leftSignal,rightSignal):
	global leftFlag,rightFlag,value1,bump1,bump5,bump6,bump7,bump8,bumperCrashCount,beginTime,rearFlag,distanceIr1,distanceIr2
        print rearSignal,leftSignal,rightSignal,value1,rearFlag,bump1
	bumperValue = bump5 + bump6 + bump7 + bump8

	if (bumperValue<4):
		bumperCrashCount = bumperCrashCount + 1
	if (bumperCrashCount == 0):
                beginTime = time.time()
		timeInterval = 0
        else:
                timeInterval = time.time()-beginTime
                print timeInterval

	batteryFlag = getBatteryProxy().ChargingFlag
	#print "battery flag is:",batteryFlag

	if (batteryFlag):
		setSpeedsProxy("F", 0, "F", 0)
	else:
		if (bumperCrashCount==0):
        		if (rearSignal == 0) and (leftSignal==0) and (rightSignal==0):
				if ( not leftFlag ) and ( not rightFlag ):
					if (rearFlag):
               					setSpeedsProxy("B", 3, "F", 3)
					else:
						setSpeedsProxy("B", 3, "B", 3)
	        	else:
                		#setSpeedsProxy("F", 0, "F", 0)
				if (rearSignal!=0):
					leftFlag = False
					rightFlag = False
					if (rearFlag):
						if (rearSignal==3):
							setSpeedsProxy("B", 3, "B", 3)
	                			elif (rearSignal==2):
							setSpeedsProxy("B", 3, "F", 3)
        	        			elif (rearSignal==1):
							setSpeedsProxy("F", 3, "B", 3)
					else:
						setSpeedsProxy("B", 4, "B", 4)
				if (leftSignal!=0):
					leftFlag = True
					if (leftSignal==1):
						setSpeedsProxy("F", 4, "B", 3)
					elif(leftSignal==2):
						setSpeedsProxy("F", 3, "B", 4)
					else:
						setSpeedsProxy("F", 3, "B", 3)
				if (rightSignal!=0):
					rightFlag = True
					if (rightSignal==1):
						setSpeedsProxy("B", 3, "F", 4)
					elif (rightSignal==2):
						setSpeedsProxy("B", 4, "F", 3)
					else:
						setSpeedsProxy("B", 3, "F", 3)
		else:
			setSpeedsProxy("F", 0, "F", 0)
			if (timeInterval>20):
				setSpeedsProxy("F", 10, "F", 10)
				time.sleep(8)
				bumperCrashCount = 0
				
			

def twist(msg):
        global twist_sign
        if (msg.linear.x==0) and (msg.linear.y==0) and (msg.angular.z==0):
                twist_sign = False
        else:
                twist_sign = True

def init():
	global sonar
	deviceNode = "1-3.2:1.0"
	(status, output) = commands.getstatusoutput("ls -l /sys/class/tty/ttyUSB*")
	devPort = "/dev"+output[output.index(deviceNode)+9:output.index(deviceNode)+17]
	#print devPort
	sonar = serial.Serial(
        	port = devPort,
        	baudrate = 115200,
        	stopbits = 1,
        	bytesize = serial.EIGHTBITS,
        	timeout = 0.5
	)
	sonar.close()
	sonar.open()

if __name__ == "__main__":
    	rospy.init_node('sonar_pub', anonymous=False)
	init()
	rospy.Subscriber("/cmd_vel", Twist, twist)
        rospy.Subscriber("/amcl_pose", PoseWithCovarianceStamped, callback)
	s = rospy.Service('getBumpers', GetBumpers, getBumpers)
	son = rospy.Service('getSonars', GetSonars, getSonars)
	get_sonar_value()
	#rospy.Subscriber("/cmd_vel", Twist, twist)
        #rospy.Subscriber("/amcl_pose", PoseWithCovarianceStamped, callback)
    	rospy.spin()

